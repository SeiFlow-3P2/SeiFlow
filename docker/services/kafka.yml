x-kafka-common: &kafka-common
  image: confluentinc/cp-kafka:7.3.2
  restart: unless-stopped
  environment: &kafka-env
    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
    KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
  healthcheck: &kafka-healthcheck
    test: nc -z localhost 29092 || exit 1
    interval: 30s
    timeout: 10s
    retries: 5

networks:
  kafka_net:
    driver: bridge
  backend:
    driver: bridge

volumes:
  kafka_broker_1_data:
  kafka_broker_2_data:
  kafka_broker_3_data:
  zookeeper_data:
  zookeeper_log:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - kafka_net
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kafka_broker_1:
    <<: *kafka-common
    container_name: kafka_broker_1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker_1:29092,CONNECTIONS_FROM_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONNECTIONS_FROM_HOST://0.0.0.0:9092
    ports:
      - "9092:9092"
    volumes:
      - kafka_broker_1_data:/var/lib/kafka/data
    networks:
      - kafka_net
      - backend

  kafka_broker_2:
    <<: *kafka-common
    container_name: kafka_broker_2
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker_2:29092,CONNECTIONS_FROM_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONNECTIONS_FROM_HOST://0.0.0.0:9093
    ports:
      - "9093:9093"
    volumes:
      - kafka_broker_2_data:/var/lib/kafka/data
    networks:
      - kafka_net
      - backend

  kafka_broker_3:
    <<: *kafka-common
    container_name: kafka_broker_3
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      <<: *kafka-env
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker_3:29092,CONNECTIONS_FROM_HOST://localhost:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONNECTIONS_FROM_HOST://0.0.0.0:9094
    ports:
      - "9094:9094"
    volumes:
      - kafka_broker_3_data:/var/lib/kafka/data
    networks:
      - kafka_net
      - backend

  schema_registry:
    image: confluentinc/cp-schema-registry:7.3.2
    container_name: schema_registry
    restart: unless-stopped
    depends_on:
      kafka_broker_1:
        condition: service_healthy
      kafka_broker_2:
        condition: service_healthy
      kafka_broker_3:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka_broker_1:29092,kafka_broker_2:29092,kafka_broker_3:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8085:8081"
    networks:
      - kafka_net
      - backend
    healthcheck:
      test: curl -f http://localhost:8081/subjects || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    restart: unless-stopped
    depends_on:
      kafka_broker_1:
        condition: service_healthy
      kafka_broker_2:
        condition: service_healthy
      kafka_broker_3:
        condition: service_healthy
      schema_registry:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: seiflow-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka_broker_1:29092,kafka_broker_2:29092,kafka_broker_3:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema_registry:8081
    ports:
      - "8086:8080"
    networks:
      - kafka_net
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/api/clusters || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kafka_topics_setup:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka_topics_setup
    depends_on:
      kafka_broker_1:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 30 &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic auth.user.created &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic auth.user.updated &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic payment.transaction.created &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic payment.transaction.updated &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic board.item.created &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic board.item.updated &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic board.item.deleted &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic calendar.event.created &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic calendar.event.updated &&
        kafka-topics --create --if-not-exists --bootstrap-server kafka_broker_1:29092 --partitions 3 --replication-factor 1 --topic calendar.event.deleted &&
        echo 'Successfully created topics' &&
        kafka-topics --bootstrap-server kafka_broker_1:29092 --list
      "
    networks:
      - kafka_net
    restart: "no"